!function(){function queryable(e){var t=this;return t.array=e,t}function createMethod(methodName){var templateString=["function (){",'  var expr = "_.'+methodName+'(this.array";',"  for (var i = 0; i < arguments.length; i++) {",'    expr += ", arguments[" + i + "]";',"  }",'  expr += ");";',"  var result = eval(expr);","  return _.isArray(result) ? result.queryable() : result;","}"].join("\n");try{eval("queryable.prototype."+methodName+" = "+templateString),console.log("methodName",methodName)}catch(e){return console.log("createMethod failed: "+templateString,e),null}}var extendedMethodNames=["each","map","reduce","reduceRight","find","filter","where","findWhere","reject","every","some","contains","invoke","pluck","max","min","sortBy","groupBy","indexBy","countBy","shuffle","sample","toArray","size","partition","first","initial","last","rest","compact","flatten","without","union","intersection","difference","uniq","zip","unzip","object","indexOf","lastIndexOf","sortedIndex","findIndex","findLastIndex","range"];_.each(extendedMethodNames,function(e){createMethod(e)}),queryable.prototype.setArray=function(e){this.array=e},queryable.prototype.getArray=function(){return this.array},Array.prototype.queryable=function(){return new queryable(this)}}();